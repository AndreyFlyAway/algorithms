/* номре посылки: 81960469 */
/*
Принцип работы:
Выделем массив (кэш) размера n*m, где n и m длины сравниваемых строк. 
Будет производиться движения по рядам матрицы, используя минимум мжежду 
тремя значениями: 
1. Предыдущее значениее текущего ряда
2. Предыдущее значениее текущего столбца
3. И значени преедыдущего ряда предыдущего стобца если символы равны, 
   иначе будем прибавляться 1.
Результат в кэше на позии [n][m]

Докозательство корректности:
В кеш мы сохраняем количество изменений, но для каждого значения из таблицы
можно получить минимальное значение, так как мы уже вычислили количество
изменения для предущих символов, так же требуеться посмотреть нужно ли менять
текущий символ, если да, то берем значенние [i - 1][j - 1], т.к. нп этой позиции
отсуствует результат замены для текщего i j, приравнивыем результат сравнения,
и сравниваем с результатами для предущих символо (т.е. [i][j - 1] и [i-1][j]), 
где уже храняться минимальные значение. Базовые случае позволяют начать вычисления.

Временная сложность:
O(n*m), где n и m — длины строк.

Простарнственная сложность:
O(n*m), где n и m - длины строк.
*/
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

int levenshtein_distance(std::string &str_1, std::string &str_2) {
    int n = str_1.size(), m = str_2.size();
    std::vector<std::vector<int>> dp(n + 1, std::vector<int>(m + 1, 0));
    for(int i = 1 ; i < dp[0].size() ; ++i) {
        dp[0][i] = i;
    } 
    for(int i = 1 ; i < dp.size() ; ++i) {
        dp[i][0] = i;
    } 
    int tmp;
    std::vector<int> prev_dp(n+1, 0); 
    for(int j = 1 ; j <= m ; ++j) {
        for(int i = 1 ; i <= n ; ++i) {
            tmp = str_1[i - 1] == str_2[j - 1] ? 0 : 1;
            dp[i][j] = std::min(std::min(dp[i-1][j] + 1, dp[i][j-1] + 1), 
                                dp[i - 1][j - 1] + tmp);
        }
    }
    return dp[n][m];
}


int main() {
    std::string str_1;
    std::string str_2;
    std::cin >> str_1 >> str_2;
    std::cout << levenshtein_distance(str_1, str_2) << std::endl;
}
